{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IoTAzurePi - 2@KSDE'2020 Rozproszony system monitoringu zrealizowany w oparciu o chmur\u0119 i internet rzeczy Opis projektu Celem projektu jest opracowanie rozproszonego systemu monitorowania, zrealizowanego korzystaj\u0105c z chmury (AWS, Azure), oraz koncepcji internetu rzeczy. W ramach projektu nale\u017cy przygotowa\u0107 urz\u0105dzenia pomiarowe / monitoruj\u0105ce na bazie komputer\u00f3w Raspberry Pi, kt\u00f3re umo\u017cliwi\u0105 zbieranie oraz przesy\u0142anie danych do platformy administracyjnej / nadzoruj\u0105cej zrealizowanej na bazie dost\u0119pnych rozwi\u0105za\u0144 chmurowych (IoT Core, IoT Hub). System musi umo\u017cliwia\u0107 zar\u00f3wna odbieranie wiadomo\u015bci z urz\u0105dze\u0144 pomiarowych i przetwarzanie ich na platformie chmurowej, jak i wysy\u0142anie wiadomo\u015bci (na przyk\u0142ad danych konfiguracyjnych) z panelu administracyjnego w chmurze do urz\u0105dze\u0144 pomiarowych. Dodatkowo panel administracyjny powinien umo\u017cliwia\u0107 przeprowadzenia analiz na danych pomiarowych. Zastosowanie projektu - IoT ogr\u00f3d Inspiracja. Poprzez aplikacj\u0119 WebAppGUI u\u017cytkownik m\u00f3g\u0142by zarz\u0105dza\u0107 swoimi ro\u015blinami oraz obserwowa\u0107 dane wysy\u0142ane z czujnik\u00f3w (temperatura, wilgotno\u015b\u0107 pomieszczenia, wilgotno\u015b\u0107 gleby, nat\u0119\u017cenie \u015bwiat\u0142a) za pomoc\u0105 prostego GUI. Znajdowa\u0142yby si\u0119 tam odpowiednie funkcj\u0119: Wizualizacja danych otrzymanych z czujnik\u00f3w Mo\u017cliwo\u015b\u0107 sterowania parametrami takimi jak wilgotno\u015b\u0107 gleby czy nat\u0119\u017cenie \u015bwiat\u0142a za pomoc\u0105 pompki z wod\u0105 oraz \u017car\u00f3wk\u0105, kt\u00f3re s\u0105 sterowane poprzez RaspberryPi. Przechowywanie danych w bazie danych CosmoDB","title":"Wprowadzenie"},{"location":"#iotazurepi-2ksde2020-rozproszony-system-monitoringu-zrealizowany-w-oparciu-o-chmure-i-internet-rzeczy","text":"","title":"IoTAzurePi - 2@KSDE'2020 Rozproszony system monitoringu zrealizowany w oparciu o chmur\u0119 i internet rzeczy"},{"location":"#opis-projektu","text":"Celem projektu jest opracowanie rozproszonego systemu monitorowania, zrealizowanego korzystaj\u0105c z chmury (AWS, Azure), oraz koncepcji internetu rzeczy. W ramach projektu nale\u017cy przygotowa\u0107 urz\u0105dzenia pomiarowe / monitoruj\u0105ce na bazie komputer\u00f3w Raspberry Pi, kt\u00f3re umo\u017cliwi\u0105 zbieranie oraz przesy\u0142anie danych do platformy administracyjnej / nadzoruj\u0105cej zrealizowanej na bazie dost\u0119pnych rozwi\u0105za\u0144 chmurowych (IoT Core, IoT Hub). System musi umo\u017cliwia\u0107 zar\u00f3wna odbieranie wiadomo\u015bci z urz\u0105dze\u0144 pomiarowych i przetwarzanie ich na platformie chmurowej, jak i wysy\u0142anie wiadomo\u015bci (na przyk\u0142ad danych konfiguracyjnych) z panelu administracyjnego w chmurze do urz\u0105dze\u0144 pomiarowych. Dodatkowo panel administracyjny powinien umo\u017cliwia\u0107 przeprowadzenia analiz na danych pomiarowych.","title":"Opis projektu"},{"location":"#zastosowanie-projektu-iot-ogrod","text":"Inspiracja. Poprzez aplikacj\u0119 WebAppGUI u\u017cytkownik m\u00f3g\u0142by zarz\u0105dza\u0107 swoimi ro\u015blinami oraz obserwowa\u0107 dane wysy\u0142ane z czujnik\u00f3w (temperatura, wilgotno\u015b\u0107 pomieszczenia, wilgotno\u015b\u0107 gleby, nat\u0119\u017cenie \u015bwiat\u0142a) za pomoc\u0105 prostego GUI. Znajdowa\u0142yby si\u0119 tam odpowiednie funkcj\u0119: Wizualizacja danych otrzymanych z czujnik\u00f3w Mo\u017cliwo\u015b\u0107 sterowania parametrami takimi jak wilgotno\u015b\u0107 gleby czy nat\u0119\u017cenie \u015bwiat\u0142a za pomoc\u0105 pompki z wod\u0105 oraz \u017car\u00f3wk\u0105, kt\u00f3re s\u0105 sterowane poprzez RaspberryPi. Przechowywanie danych w bazie danych CosmoDB","title":"Zastosowanie projektu - IoT ogr\u00f3d"},{"location":"analizaDanych/","text":"Analiza danych Przeglad rozwi\u0105za\u0144 W ramach przeszukania dost\u0119pnych rozwi\u0105za\u0144 znale\u017ali\u015bmy poni\u017csze rozwi\u0105zania: https://azure.microsoft.com/pl-pl/product-categories/analytics/ Azure Synapse Analytics - zapewnia magazynowanie danych i obliczenia, ale p\u0142atne Azure Databricks - Big Data, ML, Spark, p\u0142atne HDInsight - Big Data, Hadoop, Kafka, Spark, p\u0142atny Data Factory - integrowanie danych, p\u0142atne Machine Learning - sama us\u0142gua AML bezp\u0142atna, ale koszt maszyn wirtualnych u\u017cytych do trenowania Azure Stream Analytics - og\u00f3lnie przetwarzanie w czasie rzeczywitsym, s\u0105 wbudowane modele uczenia masznowego, bazuje na SQL, p\u0142atne Data Lake Analytics - bezserwerowa analiza danych, p\u0142aci si\u0119 za wykorzystan\u0105 moc obliczeniow\u0105 Azure Analytics Services - nic ciekawego nie znalaz\u0142em, p\u0142atne Event Hubs - streaming danych w czasie rzeczywistym, Kafka, p\u0142atne Azure Data Explorer - dane pozyskiwane w czasie rzeczywistym, zapytania SQL, p\u0142atne","title":"Analiza danych"},{"location":"analizaDanych/#analiza-danych","text":"","title":"Analiza danych"},{"location":"analizaDanych/#przeglad-rozwiazan","text":"W ramach przeszukania dost\u0119pnych rozwi\u0105za\u0144 znale\u017ali\u015bmy poni\u017csze rozwi\u0105zania: https://azure.microsoft.com/pl-pl/product-categories/analytics/ Azure Synapse Analytics - zapewnia magazynowanie danych i obliczenia, ale p\u0142atne Azure Databricks - Big Data, ML, Spark, p\u0142atne HDInsight - Big Data, Hadoop, Kafka, Spark, p\u0142atny Data Factory - integrowanie danych, p\u0142atne Machine Learning - sama us\u0142gua AML bezp\u0142atna, ale koszt maszyn wirtualnych u\u017cytych do trenowania Azure Stream Analytics - og\u00f3lnie przetwarzanie w czasie rzeczywitsym, s\u0105 wbudowane modele uczenia masznowego, bazuje na SQL, p\u0142atne Data Lake Analytics - bezserwerowa analiza danych, p\u0142aci si\u0119 za wykorzystan\u0105 moc obliczeniow\u0105 Azure Analytics Services - nic ciekawego nie znalaz\u0142em, p\u0142atne Event Hubs - streaming danych w czasie rzeczywistym, Kafka, p\u0142atne Azure Data Explorer - dane pozyskiwane w czasie rzeczywistym, zapytania SQL, p\u0142atne","title":"Przeglad rozwi\u0105za\u0144"},{"location":"cosmoDB/","text":"CosmoDB Opis W celu zapisania danych do p\u00f3\u017aniejszej analizy, w projekcie zastosowali\u015bmy us\u0142ug\u0119 Azure Cosmos DB, kt\u00f3ra u\u017cywa bazy danych mongoDB. Wersja testowa W celu testowym zosta\u0142 stworzony skrypt napisany w j\u0119zyku python, kt\u00f3ry wy\u015bwietla odebrane z IoT Hub'a dane i przekierowuje je do bazy danych Azure Cosmos DB. Wymagane: - Wersja python >= 3.6 - Posiadanie instancji IoT Hub - Posiadanie instancji Azure Cosmos DB Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\managing_storage Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe DEVICE_CONN_STRING - Znajdziemy je w (iot hub/Explorers/IoT devices/nazwa_urz\u0105dzenia/) i jest to pole Primary Connection String. EVENT_HUB_NAME, EVENT_HUB_CONN_STR - Warto\u015bci tych zmiennych s\u0105 w iot hubie (iot hub/settings/built-in endpoints) i s\u0105 to kolejno Event Hub-compatible endpoint, Event Hub-compatible name. MONGO_DB_CS - azure comsos DB account/Settings/Connection String/ Pole Primary Connection String export DEVICE_CONN_STRING='device connection string' export EVENT_HUB_NAME='event hub name' export EVENT_HUB_CONN_STR='event hub connection string' export MONGO_DB_CS='device connection string' Uruchom program main.py python main.py","title":"CosmoDB"},{"location":"cosmoDB/#cosmodb","text":"","title":"CosmoDB"},{"location":"cosmoDB/#opis","text":"W celu zapisania danych do p\u00f3\u017aniejszej analizy, w projekcie zastosowali\u015bmy us\u0142ug\u0119 Azure Cosmos DB, kt\u00f3ra u\u017cywa bazy danych mongoDB.","title":"Opis"},{"location":"cosmoDB/#wersja-testowa","text":"W celu testowym zosta\u0142 stworzony skrypt napisany w j\u0119zyku python, kt\u00f3ry wy\u015bwietla odebrane z IoT Hub'a dane i przekierowuje je do bazy danych Azure Cosmos DB. Wymagane: - Wersja python >= 3.6 - Posiadanie instancji IoT Hub - Posiadanie instancji Azure Cosmos DB Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\managing_storage Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe DEVICE_CONN_STRING - Znajdziemy je w (iot hub/Explorers/IoT devices/nazwa_urz\u0105dzenia/) i jest to pole Primary Connection String. EVENT_HUB_NAME, EVENT_HUB_CONN_STR - Warto\u015bci tych zmiennych s\u0105 w iot hubie (iot hub/settings/built-in endpoints) i s\u0105 to kolejno Event Hub-compatible endpoint, Event Hub-compatible name. MONGO_DB_CS - azure comsos DB account/Settings/Connection String/ Pole Primary Connection String export DEVICE_CONN_STRING='device connection string' export EVENT_HUB_NAME='event hub name' export EVENT_HUB_CONN_STR='event hub connection string' export MONGO_DB_CS='device connection string' Uruchom program main.py python main.py","title":"Wersja testowa"},{"location":"dokumentacja/","text":"Dokumentacja Edycja dokumentacji Wymagane: Zainstalowa\u0107 MkDocs W celu edycji strony z dokumentacj\u0105, nale\u017cy w branchu mastera zedytowa\u0107 pliki w folderze /docs/*.md oraz plik mkdocs.yml. Zmiany zostan\u0105 przerobione na odpowiednie pliki html i wrzucone na bracha gh-pages za pomoc\u0105 komendy: mkdocs gh-deploy","title":"Edycja dokumentacji"},{"location":"dokumentacja/#dokumentacja","text":"","title":"Dokumentacja"},{"location":"dokumentacja/#edycja-dokumentacji","text":"Wymagane: Zainstalowa\u0107 MkDocs W celu edycji strony z dokumentacj\u0105, nale\u017cy w branchu mastera zedytowa\u0107 pliki w folderze /docs/*.md oraz plik mkdocs.yml. Zmiany zostan\u0105 przerobione na odpowiednie pliki html i wrzucone na bracha gh-pages za pomoc\u0105 komendy: mkdocs gh-deploy","title":"Edycja dokumentacji"},{"location":"ioT_hub/","text":"\u015arodowisko IoT Hub IoT Hub Iot Hub jest to serwis zarz\u0105dzania, znajduj\u0105cy si\u0119 w chmurze Azure. Do jego zada\u0144 nale\u017cy jest spe\u0142nianie funkcji centralnego panelu zarz\u0105dzania komunikacj\u0105 dwustronn\u0105 pomi\u0119dzy urz\u0105dzeniami IoT a aplikacjami je wykorzystuj\u0105cymi. Azure IoT pozwala nam na zapewnienie stabilnej i bezpiecznej komunikacj\u0119 pomi\u0119dzy milionami urz\u0105dze\u0144 IoT i rozwi\u0105zaniami backendowymi. Do IoT Hub mo\u017cemy pod\u0142\u0105czy\u0107 ka\u017cdy rodzaj urz\u0105dzenia. Funkcje IoT Hub: - Skalowanie rozwi\u0105za\u0144 - Zabezpieczenie komunikacji - Wpudowane funkcje routowania wiadomo\u015bci - Integralno\u015b\u0107 z innymi serwisami Azure - \u0141atwa konfiguracja i kontrola nad urz\u0105dzeniami. Koszty: - Dzi\u0119ki studenckiej wersji pr\u00f3bnej Azure, mo\u017cemy skorzysta\u0107 z wersji bezp\u0142atnej IoT Hub do kt\u00f3rej zalicza si\u0119 mo\u017cliwo\u015b\u0107 wysy\u0142ania 8000 komunikat\u00f3w dziennie. Stworzenie \u015brodowiska Stworzenie \u015brodowiska jest bardzo proste. Opisane jest bardzo dobrze na oficjalnej stronie Azure'a . Nasze rozwi\u0105zanie nie jest zale\u017cne od konkretnego panelu IoT Hub. Jedyne co jest potrzebne to tzw. CONNECTION STRING, kt\u00f3ry pozwala na przy\u0142\u0105czenie urz\u0105dzenia do IoT Hub. Z tego powodu ka\u017cdy z cz\u0142onk\u00f3w zespo\u0142u stworzy\u0142 sw\u00f3j w\u0142asny panel IoT Hub do w\u0142asnego u\u017cytku.","title":"IoT Hub"},{"location":"ioT_hub/#srodowisko-iot-hub","text":"","title":"\u015arodowisko IoT Hub"},{"location":"ioT_hub/#iot-hub","text":"Iot Hub jest to serwis zarz\u0105dzania, znajduj\u0105cy si\u0119 w chmurze Azure. Do jego zada\u0144 nale\u017cy jest spe\u0142nianie funkcji centralnego panelu zarz\u0105dzania komunikacj\u0105 dwustronn\u0105 pomi\u0119dzy urz\u0105dzeniami IoT a aplikacjami je wykorzystuj\u0105cymi. Azure IoT pozwala nam na zapewnienie stabilnej i bezpiecznej komunikacj\u0119 pomi\u0119dzy milionami urz\u0105dze\u0144 IoT i rozwi\u0105zaniami backendowymi. Do IoT Hub mo\u017cemy pod\u0142\u0105czy\u0107 ka\u017cdy rodzaj urz\u0105dzenia. Funkcje IoT Hub: - Skalowanie rozwi\u0105za\u0144 - Zabezpieczenie komunikacji - Wpudowane funkcje routowania wiadomo\u015bci - Integralno\u015b\u0107 z innymi serwisami Azure - \u0141atwa konfiguracja i kontrola nad urz\u0105dzeniami. Koszty: - Dzi\u0119ki studenckiej wersji pr\u00f3bnej Azure, mo\u017cemy skorzysta\u0107 z wersji bezp\u0142atnej IoT Hub do kt\u00f3rej zalicza si\u0119 mo\u017cliwo\u015b\u0107 wysy\u0142ania 8000 komunikat\u00f3w dziennie.","title":"IoT Hub"},{"location":"ioT_hub/#stworzenie-srodowiska","text":"Stworzenie \u015brodowiska jest bardzo proste. Opisane jest bardzo dobrze na oficjalnej stronie Azure'a . Nasze rozwi\u0105zanie nie jest zale\u017cne od konkretnego panelu IoT Hub. Jedyne co jest potrzebne to tzw. CONNECTION STRING, kt\u00f3ry pozwala na przy\u0142\u0105czenie urz\u0105dzenia do IoT Hub. Z tego powodu ka\u017cdy z cz\u0142onk\u00f3w zespo\u0142u stworzy\u0142 sw\u00f3j w\u0142asny panel IoT Hub do w\u0142asnego u\u017cytku.","title":"Stworzenie \u015brodowiska"},{"location":"komunikacja/","text":"Komunikacja Wysy\u0142anie wiadomo\u015bci z IoT Hub do IoT Device Aby wys\u0142a\u0107 wiadomo\u015b\u0107 z IoT Hub do IoT Device nale\u017cy: Zainstaluj Azure CLI Dodaj connection string do zmiennych \u015brodowiskowych export DEVICE_CONN_STRING='device connection string Dodaj rozszerzenie az extension add --name azure-iot Wy\u015blij wiadomo\u015b\u0107 az iot device c2d-message send --device-id 'your device id' --hub-name 'your IoT Hub name' --data 'your message here' Wysy\u0142anie danych z IoT Device do IoT Hub Prace nad wysy\u0142aniem danych z IoT Device do IoT Hub s\u0105 przeprowadzane na branch'u device_develop . TODO Komunikacja dwustronna IoTHub - IoT Device Demo komunikacji dwustronnej zosta\u0142o opracowane na branch'u concurrent_device . Wymagane: python >= 3.6 Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\concurrent_device_work Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe DEVICE_CONN_STRING. Warto\u015bci tych zmiennych s\u0105 w iot hubie (iot hub/Explorers/IoT devices/nazwa_urz\u0105dzenia/) i jest to pole Primary Connection String. export DEVICE_CONN_STRING='device connection string' Uruchom program main.py python main.py","title":"Komunikacja"},{"location":"komunikacja/#komunikacja","text":"","title":"Komunikacja"},{"location":"komunikacja/#wysyanie-wiadomosci-z-iot-hub-do-iot-device","text":"Aby wys\u0142a\u0107 wiadomo\u015b\u0107 z IoT Hub do IoT Device nale\u017cy: Zainstaluj Azure CLI Dodaj connection string do zmiennych \u015brodowiskowych export DEVICE_CONN_STRING='device connection string Dodaj rozszerzenie az extension add --name azure-iot Wy\u015blij wiadomo\u015b\u0107 az iot device c2d-message send --device-id 'your device id' --hub-name 'your IoT Hub name' --data 'your message here'","title":"Wysy\u0142anie wiadomo\u015bci z IoT Hub do IoT Device"},{"location":"komunikacja/#wysyanie-danych-z-iot-device-do-iot-hub","text":"Prace nad wysy\u0142aniem danych z IoT Device do IoT Hub s\u0105 przeprowadzane na branch'u device_develop . TODO","title":"Wysy\u0142anie danych z IoT Device do IoT Hub"},{"location":"komunikacja/#komunikacja-dwustronna-iothub-iot-device","text":"Demo komunikacji dwustronnej zosta\u0142o opracowane na branch'u concurrent_device . Wymagane: python >= 3.6 Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\concurrent_device_work Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe DEVICE_CONN_STRING. Warto\u015bci tych zmiennych s\u0105 w iot hubie (iot hub/Explorers/IoT devices/nazwa_urz\u0105dzenia/) i jest to pole Primary Connection String. export DEVICE_CONN_STRING='device connection string' Uruchom program main.py python main.py","title":"Komunikacja dwustronna IoTHub - IoT Device"},{"location":"opis_czujnikow/","text":"Dokumentacja techniczna cz\u0119\u015bci sprz\u0119towej Do zrealizowania cz\u0119\u015bci sprz\u0119towej skorzystano z modu\u0142\u00f3w komunikacyjnych wbudowanych w platform\u0119 mikroprocesorow\u0105 Raspberry Pi. Rozpisane piny urz\u0105dzenia znajduj\u0105 si\u0119 na rysunku poni\u017cej: Czujnik temperatury i wilgotno\u015bci DHT11 Do pomiaru temperatury i wilgotno\u015bci u\u017cyto czujnik wilgotno\u015bci DHT11. Jest to czujnik cyfrowy z interfejsem jednoprzewodowym. Zakres jego pracy dla temperatury to od -20 \u00b0C do +60 \u00b0C, a wilgotno\u015bci od 5 % do 95 % RH. Czujnik ma rozdzielczo\u015b\u0107 8-bitow\u0105, przez co jego dok\u0142adno\u015b\u0107 to 1\u00b0C oraz \u00b11 % RH. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V urz\u0105dzenia Raspberry Pi (pin 1), uziemienie do pinu 9 oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 17 dost\u0119pnego na pinie 11. W celu poprawnej komunikacji jednoprzewodowej konieczne jest zastosowanie rezystora pomi\u0119dzy napi\u0119ciem a lini\u0105 danych. Rezystor powinien mie\u0107 warto\u015b\u0107 o 4.7k do 10k Ohm. Po\u0142\u0105czenie czujnika z RPi zosta\u0142o przedstawione na poni\u017cszym rysunku: Do po\u0142\u0105czenia si\u0119 z czujnikiem wykorzystano gotow\u0105 bibliotek\u0119 od Adafruit. W celu instalacji tej biblioteki trzeba wykona\u0107 nast\u0119puj\u0105ce kroki: Zainstalowa\u0107 potrzebne narz\u0119dzia: sudo apt-get update sudo apt-get install build-essential python-dev Nast\u0119pnie pobra\u0107 bibliotek\u0119 z repozytorium na githubie: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT Nast\u0119pnie zainstalowa\u0107 bibliotek\u0119 dla Pythona 2 i Pythona 3 za pomoc\u0105 komend: sudo python setup.py install sudo python3 setup.py install Do komunikacji z czujnikiem zosta\u0142 napisany skrypt w j\u0119zyku Python. Przyk\u0142adowy kod programu umo\u017cliwiaj\u0105cy komunikacj\u0119 z czujnikiem: import sys import Adafruit_DHT # 11 stand for DHT-11 and 17 stands for GPIO pin humidity, temperature = Adafruit_DHT.read_retry(11, 17) if humidity is not None and temperature is not None: print('Temp={0:0.1f}* Humidity={1:0.1f}%'.format(temperature, humidity)) else: print('Failed to get reading. Try again!') sys.exit(1) Czujnik nat\u0119\u017cenia \u015bwiat\u0142a Zastosowanym czujnikiem \u015bwiat\u0142a jest BH1750. Jest to czujnik przetwarzaj\u0105cy nat\u0119\u017cenie \u015bwiat\u0142a o d\u0142ugo\u015bci z zakresu od 320 nm do 1050 nm na mierzaln\u0105 (np. poprzez zastosowanie mikrokontrolera) proporcjonaln\u0105 cz\u0119stotliwo\u015b\u0107. Zakres dzia\u0142ania czujnika to 1-65535 lx (luks\u00f3w) z rozdzielczo\u015bci\u0105 1 lub 4 lx w zale\u017cno\u015bci od wybranego trybu pracy. Komunikuje si\u0119 poprzez interfejs I2C (TWI), czyli dwie linie: danych - SDA i zegarow\u0105 SCL. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V z urz\u0105dzenia Raspberry Pi, uziemienie do GND oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 2 (SDA) oraz do GPIO 3 (SCL) zosta\u0142 pod\u0142\u0105czony zegar interfejsu I2C. Do komunikacji z czujnikiem wykorzystano magistral\u0119 I2C. Po pod\u0142\u0105czeniu pinu ADD do uziemienie urz\u0105dzenie ma adres 0x23. Mo\u017cna ustawi\u0107 r\u00f3\u017cne tryby odczytu. Wykorzystany zosta\u0142 tryb 0x20, jest to tryb umo\u017cliwiaj\u0105cy odczyt z dok\u0142adno\u015bci\u0105 do 1 lx oraz pozwalaj\u0105cy na wy\u0142\u0105czenie urz\u0105dzenia po odczycie w celu oszcz\u0119dzenia energii. Przyk\u0142adowy kod w j\u0119zyku Python: def convert_GY30_to_Number(data): # Simple function to convert 2 bytes of data # into a decimal number. result=(data[1] + (256 * data[0])) / 1.2 return (result) def read_data_GY30(): bus = smbus.SMBus(1) # Rev 2 Pi uses 1 # 0x23 is an addres of device, 0x20 is measurement at 1lx resolution. # Time typically 120ms # Device is automatically set to Power Down after measurement. data = bus.read_i2c_block_data(0x23,0x20) return convert_GY30_to_Number(data) Czujnik wilgotno\u015bci gleby Zasilany jest napi\u0119ciem od 3,3 V do 5 V. Urz\u0105dzenie sk\u0142ada si\u0119 z trzech cz\u0119\u015bci: sondy pomiarowej, modu\u0142u detektora oraz przewod\u00f3w. Sondy nale\u017cy po\u0142\u0105czy\u0107 z modu\u0142em g\u0142\u00f3wnym przy pomocy przewod\u00f3w i umie\u015bci\u0107 w glebie, kt\u00f3rej wilgotno\u015b\u0107 b\u0119dzie mierzona. Czujnik posiada wyj\u015bcie cyfrowe D0 sygnalizuj\u0105ce przekroczenie ustawionej za pomoc\u0105 potencjometru warto\u015bci oraz analogowe A0 przy pomocy kt\u00f3rego uzyskuje si\u0119 dok\u0142adn\u0105 warto\u015b\u0107 wilgotno\u015bci. Za pomoc\u0105 potencjometru ustawiany jest pr\u00f3g, po kt\u00f3rego przekroczeniu wyj\u015bcie D0 przechodzi ze stanu wysokiego w stan niski. Czujnik posiada tak\u017ce wyj\u015bcie analogowe A0, kt\u00f3re nale\u017cy pod\u0142\u0105czy\u0107 do wyprowadzenia przetwornika A/C, a nast\u0119pnie mo\u017cliwe jest za pomoc\u0105 interfejsu I2C po\u0142\u0105czenie z urz\u0105dzeniem Raspberry Pi. Pompa do wody Do podlewania ro\u015bliny w doniczce zosta\u0142a wykorzystana pompka do wody dzia\u0142aj\u0105ca na bazie komutatorowego silnika pr\u0105du sta\u0142ego. Pompa zasilana jest napi\u0119ciem od 2.5 - 6 V. Pr\u0105d pobierany przez silnik wynosi 130-220 mA. Wydajno\u015b\u0107 przep\u0142ywu cieczy to 80-120 L/h. Maksymalny pr\u0105d, kt\u00f3ry mo\u017ce by\u0107 pobierany z zasilania 5V urz\u0105dzenia Raspberry Pi to 300 mA, wi\u0119c z urz\u0105dzenia bez problemu mo\u017cna zasili\u0107 pomp\u0119 do wody. Do wysterowania silnikiem zosta\u0142 u\u017cyty mostek H L293D.","title":"Czujniki'"},{"location":"opis_czujnikow/#dokumentacja-techniczna-czesci-sprzetowej","text":"Do zrealizowania cz\u0119\u015bci sprz\u0119towej skorzystano z modu\u0142\u00f3w komunikacyjnych wbudowanych w platform\u0119 mikroprocesorow\u0105 Raspberry Pi. Rozpisane piny urz\u0105dzenia znajduj\u0105 si\u0119 na rysunku poni\u017cej:","title":"Dokumentacja techniczna cz\u0119\u015bci sprz\u0119towej"},{"location":"opis_czujnikow/#czujnik-temperatury-i-wilgotnosci-dht11","text":"Do pomiaru temperatury i wilgotno\u015bci u\u017cyto czujnik wilgotno\u015bci DHT11. Jest to czujnik cyfrowy z interfejsem jednoprzewodowym. Zakres jego pracy dla temperatury to od -20 \u00b0C do +60 \u00b0C, a wilgotno\u015bci od 5 % do 95 % RH. Czujnik ma rozdzielczo\u015b\u0107 8-bitow\u0105, przez co jego dok\u0142adno\u015b\u0107 to 1\u00b0C oraz \u00b11 % RH. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V urz\u0105dzenia Raspberry Pi (pin 1), uziemienie do pinu 9 oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 17 dost\u0119pnego na pinie 11. W celu poprawnej komunikacji jednoprzewodowej konieczne jest zastosowanie rezystora pomi\u0119dzy napi\u0119ciem a lini\u0105 danych. Rezystor powinien mie\u0107 warto\u015b\u0107 o 4.7k do 10k Ohm. Po\u0142\u0105czenie czujnika z RPi zosta\u0142o przedstawione na poni\u017cszym rysunku: Do po\u0142\u0105czenia si\u0119 z czujnikiem wykorzystano gotow\u0105 bibliotek\u0119 od Adafruit. W celu instalacji tej biblioteki trzeba wykona\u0107 nast\u0119puj\u0105ce kroki: Zainstalowa\u0107 potrzebne narz\u0119dzia: sudo apt-get update sudo apt-get install build-essential python-dev Nast\u0119pnie pobra\u0107 bibliotek\u0119 z repozytorium na githubie: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT Nast\u0119pnie zainstalowa\u0107 bibliotek\u0119 dla Pythona 2 i Pythona 3 za pomoc\u0105 komend: sudo python setup.py install sudo python3 setup.py install Do komunikacji z czujnikiem zosta\u0142 napisany skrypt w j\u0119zyku Python. Przyk\u0142adowy kod programu umo\u017cliwiaj\u0105cy komunikacj\u0119 z czujnikiem: import sys import Adafruit_DHT # 11 stand for DHT-11 and 17 stands for GPIO pin humidity, temperature = Adafruit_DHT.read_retry(11, 17) if humidity is not None and temperature is not None: print('Temp={0:0.1f}* Humidity={1:0.1f}%'.format(temperature, humidity)) else: print('Failed to get reading. Try again!') sys.exit(1)","title":"Czujnik temperatury i wilgotno\u015bci DHT11"},{"location":"opis_czujnikow/#czujnik-natezenia-swiata","text":"Zastosowanym czujnikiem \u015bwiat\u0142a jest BH1750. Jest to czujnik przetwarzaj\u0105cy nat\u0119\u017cenie \u015bwiat\u0142a o d\u0142ugo\u015bci z zakresu od 320 nm do 1050 nm na mierzaln\u0105 (np. poprzez zastosowanie mikrokontrolera) proporcjonaln\u0105 cz\u0119stotliwo\u015b\u0107. Zakres dzia\u0142ania czujnika to 1-65535 lx (luks\u00f3w) z rozdzielczo\u015bci\u0105 1 lub 4 lx w zale\u017cno\u015bci od wybranego trybu pracy. Komunikuje si\u0119 poprzez interfejs I2C (TWI), czyli dwie linie: danych - SDA i zegarow\u0105 SCL. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V z urz\u0105dzenia Raspberry Pi, uziemienie do GND oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 2 (SDA) oraz do GPIO 3 (SCL) zosta\u0142 pod\u0142\u0105czony zegar interfejsu I2C. Do komunikacji z czujnikiem wykorzystano magistral\u0119 I2C. Po pod\u0142\u0105czeniu pinu ADD do uziemienie urz\u0105dzenie ma adres 0x23. Mo\u017cna ustawi\u0107 r\u00f3\u017cne tryby odczytu. Wykorzystany zosta\u0142 tryb 0x20, jest to tryb umo\u017cliwiaj\u0105cy odczyt z dok\u0142adno\u015bci\u0105 do 1 lx oraz pozwalaj\u0105cy na wy\u0142\u0105czenie urz\u0105dzenia po odczycie w celu oszcz\u0119dzenia energii. Przyk\u0142adowy kod w j\u0119zyku Python: def convert_GY30_to_Number(data): # Simple function to convert 2 bytes of data # into a decimal number. result=(data[1] + (256 * data[0])) / 1.2 return (result) def read_data_GY30(): bus = smbus.SMBus(1) # Rev 2 Pi uses 1 # 0x23 is an addres of device, 0x20 is measurement at 1lx resolution. # Time typically 120ms # Device is automatically set to Power Down after measurement. data = bus.read_i2c_block_data(0x23,0x20) return convert_GY30_to_Number(data)","title":"Czujnik nat\u0119\u017cenia \u015bwiat\u0142a"},{"location":"opis_czujnikow/#czujnik-wilgotnosci-gleby","text":"Zasilany jest napi\u0119ciem od 3,3 V do 5 V. Urz\u0105dzenie sk\u0142ada si\u0119 z trzech cz\u0119\u015bci: sondy pomiarowej, modu\u0142u detektora oraz przewod\u00f3w. Sondy nale\u017cy po\u0142\u0105czy\u0107 z modu\u0142em g\u0142\u00f3wnym przy pomocy przewod\u00f3w i umie\u015bci\u0107 w glebie, kt\u00f3rej wilgotno\u015b\u0107 b\u0119dzie mierzona. Czujnik posiada wyj\u015bcie cyfrowe D0 sygnalizuj\u0105ce przekroczenie ustawionej za pomoc\u0105 potencjometru warto\u015bci oraz analogowe A0 przy pomocy kt\u00f3rego uzyskuje si\u0119 dok\u0142adn\u0105 warto\u015b\u0107 wilgotno\u015bci. Za pomoc\u0105 potencjometru ustawiany jest pr\u00f3g, po kt\u00f3rego przekroczeniu wyj\u015bcie D0 przechodzi ze stanu wysokiego w stan niski. Czujnik posiada tak\u017ce wyj\u015bcie analogowe A0, kt\u00f3re nale\u017cy pod\u0142\u0105czy\u0107 do wyprowadzenia przetwornika A/C, a nast\u0119pnie mo\u017cliwe jest za pomoc\u0105 interfejsu I2C po\u0142\u0105czenie z urz\u0105dzeniem Raspberry Pi.","title":"Czujnik wilgotno\u015bci gleby"},{"location":"opis_czujnikow/#pompa-do-wody","text":"Do podlewania ro\u015bliny w doniczce zosta\u0142a wykorzystana pompka do wody dzia\u0142aj\u0105ca na bazie komutatorowego silnika pr\u0105du sta\u0142ego. Pompa zasilana jest napi\u0119ciem od 2.5 - 6 V. Pr\u0105d pobierany przez silnik wynosi 130-220 mA. Wydajno\u015b\u0107 przep\u0142ywu cieczy to 80-120 L/h. Maksymalny pr\u0105d, kt\u00f3ry mo\u017ce by\u0107 pobierany z zasilania 5V urz\u0105dzenia Raspberry Pi to 300 mA, wi\u0119c z urz\u0105dzenia bez problemu mo\u017cna zasili\u0107 pomp\u0119 do wody. Do wysterowania silnikiem zosta\u0142 u\u017cyty mostek H L293D.","title":"Pompa do wody"},{"location":"webAppGUI/","text":"WebAppGUI Opis WebAppGUI jest to aplikacja webowa przeznaczona dla u\u017cytkownika w celu zarz\u0105dzania ca\u0142ym \u015brodowiskiem. U\u017cytkownik mo\u017ce, za jej pomoc\u0105, wizualizowa\u0107 otrzymane dane, oraz sterowa\u0107 parametrami takimi jak wilgotno\u015b\u0107 gleby oraz nat\u0119\u017cenie \u015bwiat\u0142a. Aplikacja mo\u017ce by\u0107 uruchomiona lokalnie - u\u017cytkownik b\u0119dzie musia\u0142 by\u0107 w tej samej sieci by m\u00f3c si\u0119 ni\u0105 pos\u0142ugiwa\u0107, lub uruchomiona na \u015brodowisku Azure App Service , przez co u\u017cytkownik b\u0119dzie mia\u0142 dost\u0119p do aplikacji z ka\u017cdego miejsca gdzie b\u0119dzie mia\u0142 dost\u0119p do internetu. Schemat aplikacji Na powy\u017cszym rysunku jest pokazany szkic projektu aplikacji WebAppGUI. Opis kodu projektu Kod projektu jest dost\u0119pny w branchu app_develop . TODO Status obecny Na chwil\u0119 obecn\u0105 uda\u0142o si\u0119 stworzy\u0107 podstawow\u0105 wersj\u0119 prezentacyjn\u0105. Pozwala ona na stworzenie wykresu na podstawie otrzymanych danych z Iot Hub'a. W celach testowych aplikacja obs\u0142uguje 2 podstawowe typy otrzymanych danych (Temperatura i wilgotno\u015b\u0107). Wynik jest widoczny na poni\u017cszym obrazku. Prace s\u0105 wykonywane na branchu app_develop . Wymagane: - Wersja python >= 3.6 - Posiadanie instancji IoT Hub - Posiadanie instancji Azure Cosmos DB Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\app_develop Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe IotHubConnectionString - Znajdziemy je w iot hub/Shared access policies/service pole Connection string-primary key. EventHubConsumerGroup - W iot hub/settings/built-in endpoints nazwa Consumer Groups. Domy\u015blnie - \"$Default\". mongoDBConnectionString - azure comsos DB account/Settings/Connection String/ Pole Primary Connection String Linux export IotHubConnectionString='device connection string' export EventHubConsumerGroup='event ' export mongoDBConnectionString='device connection string' Windows (cmd) set IotHubConnectionString='device connection string' set EventHubConsumerGroup='event ' set mongoDBConnectionString='device connection string' Uruchom program main.py python main.py","title":"Interfejs"},{"location":"webAppGUI/#webappgui","text":"","title":"WebAppGUI"},{"location":"webAppGUI/#opis","text":"WebAppGUI jest to aplikacja webowa przeznaczona dla u\u017cytkownika w celu zarz\u0105dzania ca\u0142ym \u015brodowiskiem. U\u017cytkownik mo\u017ce, za jej pomoc\u0105, wizualizowa\u0107 otrzymane dane, oraz sterowa\u0107 parametrami takimi jak wilgotno\u015b\u0107 gleby oraz nat\u0119\u017cenie \u015bwiat\u0142a. Aplikacja mo\u017ce by\u0107 uruchomiona lokalnie - u\u017cytkownik b\u0119dzie musia\u0142 by\u0107 w tej samej sieci by m\u00f3c si\u0119 ni\u0105 pos\u0142ugiwa\u0107, lub uruchomiona na \u015brodowisku Azure App Service , przez co u\u017cytkownik b\u0119dzie mia\u0142 dost\u0119p do aplikacji z ka\u017cdego miejsca gdzie b\u0119dzie mia\u0142 dost\u0119p do internetu.","title":"Opis"},{"location":"webAppGUI/#schemat-aplikacji","text":"Na powy\u017cszym rysunku jest pokazany szkic projektu aplikacji WebAppGUI.","title":"Schemat aplikacji"},{"location":"webAppGUI/#opis-kodu-projektu","text":"Kod projektu jest dost\u0119pny w branchu app_develop . TODO","title":"Opis kodu projektu"},{"location":"webAppGUI/#status-obecny","text":"Na chwil\u0119 obecn\u0105 uda\u0142o si\u0119 stworzy\u0107 podstawow\u0105 wersj\u0119 prezentacyjn\u0105. Pozwala ona na stworzenie wykresu na podstawie otrzymanych danych z Iot Hub'a. W celach testowych aplikacja obs\u0142uguje 2 podstawowe typy otrzymanych danych (Temperatura i wilgotno\u015b\u0107). Wynik jest widoczny na poni\u017cszym obrazku. Prace s\u0105 wykonywane na branchu app_develop . Wymagane: - Wersja python >= 3.6 - Posiadanie instancji IoT Hub - Posiadanie instancji Azure Cosmos DB Uruchomienie: \u015aci\u0105gn\u0105\u0107 repozytorium git clone https://github.com/Kankarollo/IoTAzurePi.git Przenie\u015b\u0107 si\u0119 na branch komunikacji dwustronnej git checkout origin\\app_develop Zainstalowa\u0107 wymagane biblioteki : python -m pip -r requirements.txt Ustawi\u0107 zmienne \u015brodowiskowe IotHubConnectionString - Znajdziemy je w iot hub/Shared access policies/service pole Connection string-primary key. EventHubConsumerGroup - W iot hub/settings/built-in endpoints nazwa Consumer Groups. Domy\u015blnie - \"$Default\". mongoDBConnectionString - azure comsos DB account/Settings/Connection String/ Pole Primary Connection String Linux export IotHubConnectionString='device connection string' export EventHubConsumerGroup='event ' export mongoDBConnectionString='device connection string' Windows (cmd) set IotHubConnectionString='device connection string' set EventHubConsumerGroup='event ' set mongoDBConnectionString='device connection string' Uruchom program main.py python main.py","title":"Status obecny"}]}